image: "hseeberger/scala-sbt:8u222_1.3.3_2.12.10"

variables:
  # EDIT THESE VARIABLES AS NECESSARY #
  APP_PATH: "cs612-f20"
  APP_NAME: "internship"
  APP_VERSION: "latest"
  TARGET_VM: "lm003"

  #--- DO NOT EDIT BELOW ---#
  TARGET_HOST: "cs612-sn1-f20-${TARGET_VM}.eastus2.cloudapp.azure.com"
  DOCKER_ADMIN: "debadmin"
  SBT_OPTS: "-Dsbt.global.base=sbt-cache/sbtboot -Dsbt.boot.directory=sbt-cache/boot -Dsbt.ivy.home=sbt-cache/ivy"
  COURSIER_CACHE: sbt-cache/coursier #only needed if you use coursier

cache:
  # if you want to have a separate cache per branch, uncomment the next line
  # key: "$CI_BUILD_REF_NAME"
  untracked: true
  paths:
    - "sbt-cache/ivy/cache"
    - "sbt-cache/boot"
    - "sbt-cache/sbtboot"
    - "sbt-cache/target"
    #- "sbt-cache/coursier" #only needed if you use coursier
    
stages:
  - build
  - deploy

build:
  stage: build
  script:
    - sbt sbtVersion
    - sbt clean compile
    - sbt dist
    
deploy:
  stage: deploy
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - echo "$SSH_PRIVATE_KEY" >> ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - chmod 700 ~/.ssh
    - ssh-keyscan "$TARGET_HOST" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host $TARGET_VM\n\tHostName $TARGET_HOST\n\tIdentityFile ~/.ssh/id_rsa\n\tUser $DOCKER_ADMIN\n\n" > ~/.ssh/config'
  

  script:
    - ls -lRa ~/.ssh
    - ls -lRa /root/.ssh
    - ls -la $CI_PROJECT_DIR
    #- ssh -vvv -i "$SSH_PRIVATE_KEY" "debadmin@$TARGET_HOST" 'docker version'
    - ssh $TARGET_VM 'docker version'
    - scp -F "/root/.ssh/config" "target/universal/$APP_NAME-1.0-SNAPSHOT.zip" "$DOCKER_ADMIN@${TARGET_HOST}:/tmp/."
    - scp -F "/root/.ssh/config" "Dockerfile" "$DOCKER_ADMIN@${TARGET_HOST}:/tmp/."
    - ssh $TARGET_VM 'echo "Removing Old Image"'
    - ssh $TARGET_VM 'docker container ps -a'
    - ssh $TARGET_VM "docker rmi -f ${APP_PATH}/${APP_NAME}:${APP_VERSION} || true"
    - ssh $TARGET_VM "docker container stop ${APP_NAME} || true"
    - ssh $TARGET_VM "docker container rm -f ${APP_NAME} || true"
    - ssh $TARGET_VM 'docker system prune -f'
    - ssh $TARGET_VM 'echo "Loading image"'
    - ssh $TARGET_VM 'pwd'
    - ssh $TARGET_VM 'rm -rf svc'
    - ssh $TARGET_VM "unzip -d svc /tmp/$APP_NAME-1.0-SNAPSHOT.zip"
    - ssh $TARGET_VM 'cp /tmp/Dockerfile .'
    - ssh $TARGET_VM 'mv svc/*/* svc/'
    - ssh $TARGET_VM 'rm svc/bin/*.bat'
    - ssh $TARGET_VM 'mv svc/bin/* svc/bin/start'
    - ssh $TARGET_VM "docker build -t ${APP_PATH}/${APP_NAME} ."
    - ssh $TARGET_VM 'docker image ls'
    #- ssh $TARGET_VM 'docker run -d --name internship -p80:80 cs612-f20/internship'
    - echo "Launching your application from your $TARGET_HOST. Run the following command to see your log files."
    - echo "docker logs -f --name $APP_NAME"
    - ssh $TARGET_VM "docker run -d --name $APP_NAME -p80:80 $APP_PATH/$APP_NAME"

